import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Plus,
  ArrowLeft,
  Tag,
  TrendingUp,
  CheckCircle,
  Clock,
  Percent,
} from "lucide-react";
import PromoCodesStats from "./PromoCodesStats";
import { useCreateCouponMutation } from "@/redux/features/promocodes/promocodesApi";

export default function PromoCodesBoard() {
  const [createCoupon] = useCreateCouponMutation();
  const [showModal, setShowModal] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [campaignData, setCampaignData] = useState({
    campaignName: "",
    promoCode: "",
    autoGenerated: false,
    discountType: "percentage",
    percentage: "",
    fixedAmount: "",
    usageLimit: "1000",
    unlimited: false,
    expiry: "no-expiry",
    expiryDate: "",
    targetAudience: "all-users",
    billingCycle: "all",
  });
  const [validationErrors, setValidationErrors] = useState({});

  const handleInputChange = (field, value) => {
    let newValue = value;
    if (field === "percentage" && Number(value) > 100) {
      newValue = "100";
    }

    setCampaignData((prev) => ({ ...prev, [field]: newValue }));
    setValidationErrors((prev) => ({ ...prev, [field]: undefined })); // Clear error on change

    // Auto-generate promo code if enabled
    if (field === "campaignName" && campaignData.autoGenerated) {
      const code =
        value.toUpperCase().replace(/\s+/g, "").slice(0, 8) +
        Math.floor(Math.random() * 100);
      setCampaignData((prev) => ({ ...prev, promoCode: code }));
    }
  };

  const handleNext = () => {
    // Basic validation before moving to the next step
    if (currentStep === 1) {
      const errors = {};
      if (!campaignData.campaignName) {
        errors.campaignName = "Campaign Name is required.";
      }
      if (!campaignData.promoCode && !campaignData.autoGenerated) {
        errors.promoCode = "Coupon Code is required or auto-generate.";
      }
      if (campaignData.discountType === "percentage") {
        const percentage = Number(campaignData.percentage);
        if (isNaN(percentage) || percentage <= 0 || percentage > 100) {
          errors.percentage = "Percentage must be between 1 and 100.";
        }
      } else if (campaignData.discountType === "fixed") {
        const fixedAmount = Number(campaignData.fixedAmount);
        if (isNaN(fixedAmount) || fixedAmount <= 0) {
          errors.fixedAmount = "Fixed amount must be a positive number.";
        }
      }
      if (Object.keys(errors).length > 0) {
        setValidationErrors(errors);
        return;
      }
    }
    setCurrentStep(currentStep + 1);
  };
  const handleBack = () => currentStep > 1 && setCurrentStep(currentStep - 1);

  const handleDeploy = async () => {
    const newCouponData = {
      campaignName: campaignData.campaignName,
      couponCode: campaignData.promoCode,
      discountType:
        campaignData.discountType === "percentage"
          ? "Percentage"
          : "Fixed Amount",
      discountValue:
        campaignData.discountType === "percentage"
          ? Number(campaignData.percentage)
          : Number(campaignData.fixedAmount),
      usageLimit: campaignData.unlimited
        ? "unlimited"
        : campaignData.usageLimit,
      expiry:
        campaignData.expiry === "no-expiry" ? null : campaignData.expiryDate,
      targetAudience:
        campaignData.targetAudience === "all-users"
          ? "All users"
          : campaignData.targetAudience === "monthly"
          ? "Monthly users"
          : "Yearly users",
    };

    try {
      await createCoupon(newCouponData).unwrap();
      setShowModal(false);
      setCurrentStep(1);
      setCampaignData({
        campaignName: "",
        promoCode: "",
        autoGenerated: false,
        discountType: "percentage",
        percentage: "",
        fixedAmount: "",
        usageLimit: "1000",
        unlimited: false,
        expiry: "no-expiry",
        expiryDate: "",
        targetAudience: "all-users",
        billingCycle: "all",
      });
    } catch (error) {
      console.error("Failed to create coupon:", error);
      // Handle error (e.g., show a toast notification)
    }
  };

  const openModal = () => {
    setShowModal(true);
    setCurrentStep(1);
  };

  const closeModal = () => {
    setShowModal(false);
    setCurrentStep(1);
  };

  const renderModalContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <>
            <DialogHeader>
              <DialogTitle className="text-xl font-semibold">
                Basic Settings
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-6 py-6">
              <div className="space-y-2">
                <Label htmlFor="campaign-name" className="text-sm font-medium">
                  Campaign Name
                </Label>
                <Input
                  id="campaign-name"
                  value={campaignData.campaignName}
                  onChange={(e) =>
                    handleInputChange("campaignName", e.target.value)
                  }
                  placeholder="Summer Sale"
                  className="h-11"
                />
                {validationErrors.campaignName && (
                  <span className="text-red-500 text-sm">
                    {validationErrors.campaignName}
                  </span>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="promo-code" className="text-sm font-medium">
                  Coupon Code
                </Label>
                <Input
                  id="promo-code"
                  value={campaignData.promoCode}
                  onChange={(e) =>
                    handleInputChange("promoCode", e.target.value)
                  }
                  placeholder="SUMMER20"
                  disabled={campaignData.autoGenerated}
                  className="h-11"
                />
                {validationErrors.promoCode && (
                  <span className="text-red-500 text-sm">
                    {validationErrors.promoCode}
                  </span>
                )}
                <div className="flex items-center space-x-2 mt-2">
                  <Switch
                    id="auto-generated"
                    checked={campaignData.autoGenerated}
                    onCheckedChange={(checked) =>
                      handleInputChange("autoGenerated", checked)
                    }
                  />
                  <Label htmlFor="auto-generated" className="text-sm">
                    Auto generated
                  </Label>
                  <span className="text-xs text-blue-600 ml-2">Custom</span>
                </div>
              </div>

              <div className="space-y-3">
                <Label className="text-sm font-medium">Discount Type</Label>
                <RadioGroup
                  value={campaignData.discountType}
                  onValueChange={(value) =>
                    handleInputChange("discountType", value)
                  }
                  className="space-y-3"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="percentage" id="percentage" />
                    <Label htmlFor="percentage" className="text-sm">
                      Percentage
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="fixed" id="fixed" />
                    <Label htmlFor="fixed" className="text-sm">
                      Fixed Amount
                    </Label>
                  </div>
                </RadioGroup>
              </div>

              {campaignData.discountType === "percentage" ? (
                <div className="space-y-2">
                  <Label
                    htmlFor="percentage-value"
                    className="text-sm font-medium"
                  >
                    Percentage
                  </Label>
                  <div className="relative">
                    <Input
                      id="percentage-value"
                      value={campaignData.percentage}
                      onChange={(e) =>
                        handleInputChange("percentage", e.target.value)
                      }
                      placeholder="20"
                      className="h-11 pr-8"
                      type="number"
                    />
                    <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                      %
                    </span>
                  </div>
                  {validationErrors.percentage && (
                    <span className="text-red-500 text-sm">
                      {validationErrors.percentage}
                    </span>
                  )}
                </div>
              ) : (
                <div className="space-y-2">
                  <Label htmlFor="fixed-amount" className="text-sm font-medium">
                    Fixed Amount
                  </Label>
                  <div className="relative">
                    <Input
                      id="fixed-amount"
                      value={campaignData.fixedAmount}
                      onChange={(e) =>
                        handleInputChange("fixedAmount", e.target.value)
                      }
                      placeholder="10"
                      className="h-11 pl-8"
                      type="number"
                    />
                    <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">
                      $
                    </span>
                  </div>
                  {validationErrors.fixedAmount && (
                    <span className="text-red-500 text-sm">
                      {validationErrors.fixedAmount}
                    </span>
                  )}
                </div>
              )}

              <div className="space-y-3">
                <Label className="text-sm font-medium">Usage Limit</Label>
                <div className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <RadioGroup
                      value={campaignData.unlimited ? "unlimited" : "limited"}
                      onValueChange={(value) =>
                        handleInputChange("unlimited", value === "unlimited")
                      }
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="limited" id="limited" />
                        <Label htmlFor="limited" className="text-sm">
                          Max uses
                        </Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="unlimited" id="unlimited" />
                        <Label htmlFor="unlimited" className="text-sm">
                          Unlimited
                        </Label>
                      </div>
                    </RadioGroup>
                  </div>
                  {!campaignData.unlimited && (
                    <Input
                      value={campaignData.usageLimit}
                      onChange={(e) =>
                        handleInputChange("usageLimit", e.target.value)
                      }
                      placeholder="1000"
                      className="h-11"
                      type="number"
                    />
                  )}
                </div>
              </div>

              <div className="space-y-3">
                <Label className="text-sm font-medium">Expiry</Label>
                <RadioGroup
                  value={campaignData.expiry}
                  onValueChange={(value) => handleInputChange("expiry", value)}
                  className="space-y-3"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="no-expiry" id="no-expiry" />
                    <Label htmlFor="no-expiry" className="text-sm">
                      No expiry
                    </Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="set-date" id="set-date" />
                    <Label htmlFor="set-date" className="text-sm">
                      Set expiry date
                    </Label>
                  </div>
                </RadioGroup>
                {campaignData.expiry === "set-date" && (
                  <Input
                    type="date"
                    value={campaignData.expiryDate}
                    onChange={(e) =>
                      handleInputChange("expiryDate", e.target.value)
                    }
                    className="h-11"
                  />
                )}
              </div>
            </div>
            <div className="flex justify-end space-x-3 pt-4 border-t">
              <Button variant="outline" onClick={closeModal}>
                Cancel
              </Button>
              <Button
                className="bg-[#1593E5] hover:bg-[#0f7ae5] text-white"
                onClick={handleNext}
              >
                Next
              </Button>
            </div>
          </>
        );

      case 2:
        return (
          <>
            <DialogHeader>
              <DialogTitle className="text-xl font-semibold">
                Audience Targeting
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-6 py-6">
              <div className="space-y-2">
                <Label className="text-sm font-medium">
                  Select Target Audience
                </Label>
                <p className="text-sm text-muted-foreground">
                  Sent to all registered users
                </p>
              </div>

              <div className="space-y-4">
                <div className="space-y-3">
                  <div className="flex items-center space-x-2">
                    <RadioGroup
                      value={campaignData.targetAudience}
                      onValueChange={(value) =>
                        handleInputChange("targetAudience", value)
                      }
                      className="space-y-4"
                    >
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="all-users" id="all-users" />
                        <div>
                          <Label
                            htmlFor="all-users"
                            className="text-sm font-medium"
                          >
                            All Users
                          </Label>
                          <p className="text-xs text-muted-foreground">
                            Sent to all registered users
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="monthly" id="monthly" />
                        <div>
                          <Label
                            htmlFor="monthly"
                            className="text-sm font-medium"
                          >
                            Monthly
                          </Label>
                          <p className="text-xs text-muted-foreground">
                            Target monthly users
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="yearly" id="yearly" />
                        <div>
                          <Label
                            htmlFor="yearly"
                            className="text-sm font-medium"
                          >
                            Yearly
                          </Label>
                          <p className="text-xs text-muted-foreground">
                            Sent to yearly/registered users
                          </p>
                        </div>
                      </div>
                    </RadioGroup>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex justify-between pt-4 border-t">
              <Button variant="outline" onClick={handleBack}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Previous
              </Button>
              <Button
                className="bg-[#1593E5] hover:bg-[#0f7ae5] text-white"
                onClick={handleNext}
              >
                Next
              </Button>
            </div>
          </>
        );

      case 3:
        return (
          <>
            <DialogHeader>
              <DialogTitle className="text-xl font-semibold">
                Review & Deploy
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-6 py-6">
              <div className=" rounded-lg p-6 space-y-4">
                <h3 className="text-lg font-semibold text-[#1593E5] mb-4">
                  Campaign Summary
                </h3>

                {[
                  {
                    label: "Campaign Name:",
                    value: campaignData.campaignName || "Summer Sale",
                  },
                  {
                    label: "Coupon Name:",
                    value: campaignData.promoCode || "SUMMER20",
                  },
                  {
                    label: "Discount:",
                    value:
                      campaignData.discountType === "percentage"
                        ? `${campaignData.percentage || "20"}% OFF`
                        : `$${campaignData.fixedAmount || "10"} OFF`,
                  },
                  {
                    label: "Usage Limit:",
                    value: campaignData.unlimited
                      ? "Unlimited"
                      : `${campaignData.usageLimit} users`,
                  },
                  {
                    label: "Target Audience:",
                    value:
                      campaignData.targetAudience === "all-users"
                        ? "All users"
                        : campaignData.targetAudience === "monthly"
                        ? "Monthly users"
                        : "Yearly users",
                  },
                  {
                    label: "Expiry:",
                    value:
                      campaignData.expiry === "no-expiry"
                        ? "No expiry"
                        : campaignData.expiryDate,
                  },
                ].map((item, index) => (
                  <div
                    key={index}
                    className="flex justify-between items-center py-2"
                  >
                    <span className="text-sm text-black font-medium">
                      {item.label}
                    </span>
                    <span className="text-sm font-semibold text-black text-right">
                      {item.value}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex justify-between pt-4 border-t">
              <Button variant="outline" onClick={handleBack}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Previous
              </Button>
              <Button
                onClick={handleDeploy}
                className="bg-[#1593E5] hover:bg-[#0f7ae5] text-white"
              >
                Publish
              </Button>
            </div>
          </>
        );

      default:
        return null;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "active":
        return "text-green-600 bg-green-50";
      case "expired":
        return "text-red-600 bg-red-50";
      case "paused":
        return "text-yellow-600 bg-yellow-50";
      default:
        return "text-gray-600 bg-gray-50";
    }
  };

  return (
    <main className="">
      <div className="flex items-center justify-between mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Promo Codes</h1>
        <Button
          onClick={openModal}
          className="bg-[#1593E5] hover:bg-[#0f7ae5] text-white"
        >
          <Plus className="w-4 h-4 mr-2" />
          Add New Offer
        </Button>
      </div>

      <PromoCodesStats />
      {/* Modal */}
      <Dialog open={showModal} onOpenChange={setShowModal}>
        <DialogContent className="sm:max-w-lg max-h-[90vh] overflow-y-auto">
          {renderModalContent()}
        </DialogContent>
      </Dialog>
    </main>
  );
}
