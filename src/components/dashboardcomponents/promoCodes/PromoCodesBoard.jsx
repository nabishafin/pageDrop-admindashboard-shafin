import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Plus,
  ArrowLeft,
  Tag,
  TrendingUp,
  TrendingDown,
  CheckCircle,
  Clock,
} from "lucide-react";
import PromoCodesStats from "./PromoCodesStats";

export default function PromoCodesBoard() {
  const [showModal, setShowModal] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [campaignData, setCampaignData] = useState({
    campaignName: "Summer Sale",
    promoCode: "SUMMER20",
    autoGenerated: false,
    audience: "All users",
    discountType: "percentage",
    percentage: "20",
    usageLimit: "1000",
    expiry: "no-expiry",
    targetAudience: "All users",
    billingCycle: "monthly",
  });

  const handleInputChange = (field, value) => {
    setCampaignData((prev) => ({ ...prev, [field]: value }));
  };

  const handleNext = () => currentStep < 3 && setCurrentStep(currentStep + 1);
  const handleBack = () => currentStep > 1 && setCurrentStep(currentStep - 1);

  const handleDeploy = () => {
    console.log("Deploying campaign:", campaignData);
    setShowModal(false);
    setCurrentStep(1);
    setCampaignData({
      campaignName: "",
      promoCode: "",
      autoGenerated: false,
      audience: "",
      discountType: "percentage",
      percentage: "",
      usageLimit: "",
      expiry: "no-expiry",
      targetAudience: "",
      billingCycle: "monthly",
    });
  };

  const openModal = () => {
    setShowModal(true);
    setCurrentStep(1);
  };

  const closeModal = () => {
    setShowModal(false);
    setCurrentStep(1);
  };

  const renderModalContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <>
            <DialogHeader>
              <DialogTitle>Basic Settings</DialogTitle>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="campaign-name">Campaign Name</Label>
                <Input
                  id="campaign-name"
                  value={campaignData.campaignName}
                  onChange={(e) =>
                    handleInputChange("campaignName", e.target.value)
                  }
                  placeholder="Enter campaign name"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="promo-code">Promo Code</Label>
                <Input
                  id="promo-code"
                  value={campaignData.promoCode}
                  onChange={(e) =>
                    handleInputChange("promoCode", e.target.value)
                  }
                  placeholder="Enter promo code"
                  disabled={campaignData.autoGenerated}
                />
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="auto-generated"
                  checked={campaignData.autoGenerated}
                  onCheckedChange={(checked) =>
                    handleInputChange("autoGenerated", checked)
                  }
                />
                <Label htmlFor="auto-generated">Auto generated</Label>
              </div>

              <div className="space-y-2">
                <Label htmlFor="audience">Audience</Label>
                <Input
                  id="audience"
                  value={campaignData.audience}
                  onChange={(e) =>
                    handleInputChange("audience", e.target.value)
                  }
                  placeholder="Select audience"
                />
              </div>

              <div className="space-y-2">
                <Label>Discount Type</Label>
                <RadioGroup
                  value={campaignData.discountType}
                  onValueChange={(value) =>
                    handleInputChange("discountType", value)
                  }
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="percentage" id="percentage" />
                    <Label htmlFor="percentage">Percentage</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="fixed" id="fixed" />
                    <Label htmlFor="fixed">Fixed Amount</Label>
                  </div>
                </RadioGroup>
              </div>

              {campaignData.discountType === "percentage" && (
                <div className="space-y-2">
                  <Label htmlFor="percentage">Percentage</Label>
                  <Input
                    id="percentage"
                    value={campaignData.percentage}
                    onChange={(e) =>
                      handleInputChange("percentage", e.target.value)
                    }
                    placeholder="%"
                  />
                </div>
              )}

              <div className="space-y-2">
                <Label>Expiry</Label>
                <RadioGroup
                  value={campaignData.expiry}
                  onValueChange={(value) => handleInputChange("expiry", value)}
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="no-expiry" id="no-expiry" />
                    <Label htmlFor="no-expiry">No expiry</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="set-date" id="set-date" />
                    <Label htmlFor="set-date">Set expiry date</Label>
                  </div>
                </RadioGroup>
              </div>
            </div>
            <div className="flex justify-end space-x-2">
              <Button variant="outline" onClick={closeModal}>
                Cancel
              </Button>
              <Button
                className="bg-[#4FB2F3] hover:bg-[#4FB2F3]"
                onClick={handleNext}
              >
                Continue
              </Button>
            </div>
          </>
        );

      case 2:
        return (
          <>
            <DialogHeader>
              <DialogTitle>Audience Targeting</DialogTitle>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label>Select Target Audience</Label>
                <p className="text-sm text-gray-500">
                  Set up to 10 segments users
                </p>
              </div>

              <div className="space-y-4">
                {["monthly", "yearly"].map((type) => (
                  <div
                    key={type}
                    className="flex items-center justify-between p-4 border rounded-lg"
                  >
                    <div>
                      <div className="font-medium capitalize">{type}</div>
                      <div className="text-sm text-gray-500">
                        Users paying {type}
                      </div>
                    </div>
                    <Switch
                      checked={campaignData.targetAudience === type}
                      onCheckedChange={(checked) =>
                        handleInputChange("targetAudience", checked ? type : "")
                      }
                    />
                  </div>
                ))}
              </div>
            </div>
            <div className="flex justify-between">
              <Button variant="outline" onClick={handleBack}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
              <Button
                className="bg-[#4FB2F3] hover:bg-[#4FB2F3]"
                onClick={handleNext}
              >
                Continue
              </Button>
            </div>
          </>
        );

      case 3:
        return (
          <>
            <DialogHeader>
              <DialogTitle>Review & Deploy</DialogTitle>
            </DialogHeader>
            <div className="space-y-6 py-4">
              <h3 className="text-sm font-medium text-gray-900 mb-4">
                Campaign Summary
              </h3>

              {[
                { label: "Campaign Name", value: campaignData.campaignName },
                { label: "Coupon Name", value: campaignData.promoCode },
                {
                  label: "Discount",
                  value: `${campaignData.percentage}% OFF`,
                },
                {
                  label: "Usage Limit",
                  value: `${campaignData.usageLimit} users`,
                },
                {
                  label: "Target Audience",
                  value: campaignData.targetAudience,
                },
                {
                  label: "Expiry",
                  value:
                    campaignData.expiry === "no-expiry"
                      ? "No expiry"
                      : "Custom date",
                },
              ].map((item) => (
                <div
                  key={item.label}
                  className="flex justify-between items-center py-2 border-b border-gray-100"
                >
                  <span className="text-sm text-gray-600">{item.label}:</span>
                  <span className="text-sm font-medium text-gray-900">
                    {item.value}
                  </span>
                </div>
              ))}
            </div>

            <div className="flex justify-between">
              <Button variant="outline" onClick={handleBack}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
              <Button
                onClick={handleDeploy}
                className="bg-[#4FB2F3] hover:bg-[#4FB2F3]"
              >
                Deploy
              </Button>
            </div>
          </>
        );

      default:
        return null;
    }
  };

  return (
    <div className="">
      <div className="mx-auto">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-2xl font-bold text-gray-900">Promo Codes</h1>
          <Button
            onClick={openModal}
            className="bg-[#4FB2F3] hover:bg-[#4FB2F3]"
          >
            <Plus className="w-4 h-4 mr-2" />
            Add New Offer
          </Button>
        </div>
        <PromoCodesStats />
        <Dialog open={showModal} onOpenChange={setShowModal}>
          <DialogContent className="sm:max-w-md">
            {renderModalContent()}
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
}
